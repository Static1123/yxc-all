Spring 的 AOP 的底层用到两种代理机制：
1.JDK 的动态代理 :针对实现了接口的类产生代理.
2.Cglib 的动态代理:针对没有实现接口的类产生代理. 应用的是底层的字节码增强的技术 生成当前类的子类对象.

a.Pointcut：切入点，在类中有很多方法可以被增强，而只有实际增强的方法称为切入点；
b.Advice：通知/增强，实际增强的逻辑，被称为通知/增强，比如拓展日志功能，日志功能被称为通知/增强；
    1)前置通知：在方法之前执行
    2)后置通知：在方法之后执行
    3)异常通知：方法出现异常
    4)最终通知：在后置之后执行
    5)环绕通知：在方法之前和之后执行
c.Introduction(引介):引介是一种特殊的通知在不修改类代码的前提下, Introduction 可以在运行期为类动态地添加一些方法或 Field;
d.Target(目标对象):代理的目标对象；
e.Weaving(织入):是指把增强应用到目标对象来创建新的代理对象的过程(spring 采用动态代理织入，而 AspectJ 采用编译期织入和类装在期织入);
f.Proxy（代理）:一个类被 AOP 织入增强后，就产生一个结果代理类。
g.Aspect：切面，将增强应用到具体方法上的过程称为切面（把增强用到切入点过程）
h.Joinpoint：连接点，类里面可以被增强的方法，被称为连接点